openapi: 3.1.1
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
info:
  title: Basic API Example
  version: 1.0.0
  description: A simple CRUD API for managing users

servers:
  - url: http://localhost:3001
    description: Local mock server
  - url: https://api.example.com
    description: Production server

paths:
  /users:
    get:
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                users:
                  summary: Example users list
                  value:
                    - id: 1
                      name: "John Doe"
                      email: "john@example.com"
                      isActive: true
                      createdAt: "2024-01-15T10:30:00Z"
                      updatedAt: "2024-01-15T10:30:00Z"
                    - id: 2
                      name: "Jane Smith"
                      email: "jane@example.com"
                      isActive: false
                      createdAt: "2024-01-16T14:20:00Z"
                      updatedAt: "2024-01-20T09:15:00Z"
    
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type:
            - integer
            - string
          description: Unique identifier
        name:
          type: string
          description: Full name
        email:
          type: string
          format: email
          description: Email address
        isActive:
          type: boolean
          description: Whether the user is active
          default: true
        lastLoginAt:
          oneOf:
            - type: string
              format: date-time
            - type: "null"
          description: When the user last logged in (null if never)
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        updatedAt:
          type: string
          format: date-time
          description: When the user was last updated
        metadata:
          type: object
          description: Additional user metadata
          patternProperties:
            "^x-":
              type: string
          additionalProperties: false
      required:
        - id
        - name
        - email
        - createdAt
        - updatedAt

    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
          description: Full name
        email:
          type: string
          format: email
          description: Email address
        isActive:
          type: boolean
          description: Whether the user is active
          default: true
      required:
        - name
        - email

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          description: Full name
        email:
          type: string
          format: email
          description: Email address
        isActive:
          type: boolean
          description: Whether the user is active

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
      required:
        - message